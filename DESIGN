class: Point
methods:
   distance_sq()
   adjacent()

class: Background
methods:
   __init__()
   get_images()
   get_image()
   get_name()
   next_image()
   entity_string()

class: MinerNotFull
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_rate()
   set_resource_count()
   get_resource_count()
   get_resource_limit()
   get_name()
   get_animation_rate()
   remove_pending_action()
   add_pending_action()
   get_pending_action()
   clear_pending_actions()
   next_image()
   entity_string()
   miner_to_ore()
   create_miner_action()
   try_transform_miner()
   schedule_miner()


class: MinerFull
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_rate()
   set_resource_count()
   get_resource_count()
   get_resource_limit()
   get_name()
   get_animation_rate()
   remove_pending_action()
   add_pending_action()
   get_pending_action()
   clear_pending_actions()
   next_image()
   entity_string()
   miner_to_smith()
   create_miner_action()
   try_transform_miner()

class: Vein
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_rate()
   get_resource_distance()
   get_name()
   remove_pending_action()
   add_pending_action()
   get_pending_actions()
   clear_pending_actions()
   next_image()
   entity_string()
   create_vein_action()
   schedule_vein()
   
class: Ore
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_rate()
   get_name()
   remove_pending_action()
   add_pending_action()
   get_pending_actions()
   clear_pending_actions()
   next_image()
   entity_string()
   
class: Blacksmith
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_rate()
   set_resource_count()
   get_resource_count()
   get_resource_limit()
   get_resource_distance()
   get_name()
   remove_pending_action()
   add_pending_action()
   get_pending_actions()
   clear_pending_actions()
   next_image()
   entity_string()
   
class: Obstacle
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_name()
   next_image()
   entity_string()
   
class: OreBlob
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_rate()
   get_name()
   get_animation_rate()
   remove_pending_action()
   add_pending_action()
   get_pending_actions()
   clear_pending_actions()
   next_image()
   entity_string()
   blob_to_vein()
   create_ore_blob_action()
   schedule_blob()
   
class: Quake
methods:
   __init__()
   set_position()
   get_position()
   get_images()
   get_image()
   get_name()
   get_animation_rate()
   remove_pending_action()
   add_pending_action()
   get_pending_actions()
   clear_pending_actions()
   next_image()
   entity_string()

class: WorldModel
methods:
   __init__()
   within_bounds()
   is_occupied()
   find_nearest()
   add_entity()
   move_entity()
   remove_entity()
   remove_entity_at()
   schedule_action()
   unschedule_action()
   update_on_time()
   get_background_time()
   get_background()
   set_background()
   get_tile_occupant()
   get_entities()
   next_position()
   blob_next_position()
   find_open_around()

class: WorldView
methods:
   __init__()
   draw_background()
   draw_entities()
   draw_viewport()
   update_view()
   update_view_tiles()
   update_tile()
   get_tile_image()
   create_mouse_surface()
   update_mouse_cursor()
   mouse_move()

class: Grid
methods:
   __init__()
   set_cell()
   get_cell()

class: OrderedList
methods:
   __init__()
   insert()
   remove()
   head()
   pop()

class: ListItem
methods:
   __init__()
   __eq__()



***********************************
Functions Not Turned into Methods:
***********************************

actions.py:
   create_animation_action() - left a function because it doesn't belong to a specific entity type
   try_transform_miner() - left a function because it doesn't belong to a specific entity type
   remove_entity() - left a function because it doesn't belong to a specific entity type
   create_blob() - left a function because doesn't belong in the Blob class and simply creates and returns a blob
   create_ore() -  left a function because doesn't belong in the Ore class and simply creates and returns an ore
   create_quake() - left a function because doesn't belong in the Quake class and simply creates and returns a quake
   create_vein() - left a function because doesn't belong in the Vein class and simply creates and returns a vein
   schedule_action() - left a function because it doesn't belong to a specific entity type
   schedule_animation() - left a function because it doesn't belong to a specific entity type
   clear_pending_actions() - left a function because it doesn't belong to a specific entity type

builder_controller.py:
   mouse_to_tile() - left as a function because it has one use, to return the mouses position in the grid
   save_world() - left as a function because it has one use, to open a file and save the status of the "world"
   load_world() - left as a function because it has one use, to open a file and call another function
   on_keydown() - left as a function because it has one use, to determine the event key selected 
   handle_mouse_motion() - left as a function because it has one use, to manage the motion of the mouse
   handle_keydown() - left as a function because it has one use, to handle the determined key event
   create_new_entity() - left as a function because it has one use, to create an enitity at a specified point 
   is_background_tile() - left as a function because it has one use, to the specified background tag
   handle_mouse_button() - left as a function because it has one use, to use the 
                           mouse and events to interact with entities and determine the resulting actions 
   activity_loop() - left as a function because it serves to keep the actions and events in a continual loop

builder.py:
   create_default_background() - left as a function because it just returns an image, doesn't depend on an object
   main() - left as a function because the main function doesn't depend on a specific object and 
            doesn't take in any parameters

controller.py:
   on_keydown() - left as a function because it has one use, to determine the event key selected
   mouse_to_tile() - left as a function because it has one use, to return the mouses position in the grid
   handle_timer_event() - left as a function because it has one use, to update the tiles based on the world's
                          state at the current time
   handle_mouse_motion() - left as a function because it has one use, to manage the motion of the mouse
   handle_keydown() - left as a function because it has one use, to handle the determined key event
   activity_loop() - left as a function because it serves to keep the actions and events in a continual loop

entities.py:
   *Consists soley of methods*

image_store.py:
   create_default_image() -
   load_images() -
   process_image_line() -
   get_images_internal() -
   get_images() -
   
keys.py:
   *Consists of enums*

main.py:
   create_default_background() - left as a function because it just returns an image, doesn't depend on an object
   load_world() - left as a function because it has one use, to open a file and call another function
   main() - left as a function because the main function doesn't depend on a specific object and 
            doesn't take in any parameters

mouse_buttons.py:
   *Consists of enums*

occ_grid.py:
   *Consists soley of methods*

ordered_list.py:
   *Consists soley of methods*

point.py:
   sign(x) - left as a function because it only performs logic and doesn't relate to any entity
             or abstract object

save_load.py:
   save_world() - this stays as a function because it is connected to two other functions in this file. It could be moved to the WorldModel class possibly. However as an origanizational decision it makes sense to keep this in the file responsible for saving and loading.
   save_entities() - stays as a function because it deals with file writing and saving which makes sense for this file. Same as the above, it could have been moved to the WorldModel class but it makes sense to leave it in saving and loading file.
   save_background() - stays as a function because it deals with file writing. It may have made sense to move this to the WorldModel class, but in order to keep the organization up to par, we decided to keep this with the saving and loading file.
   load_world() - aswell as being involved in the process of loading a world. One main reason we decided to leave this as a function is because it uses global variables in the save_load module that would be difficult/unnecessarily accessed in the WorldModel class.
   add_background() - same as above functions. Could be moved to WorldModel class, makes more sense to be here for organization as well as because it uses global variables in this module.
   add_entity() - same as above functions. Could be moved to WorldModel class, makes more sense to be here for organization as well as because it uses global variables in this module.
   create_from_properties() - makes more sense to keep this here as it doesn't obviously belong to any class. This function also works with alot of global variables in this module.
   create_miner() - makes more sense to keep this here as it doesn'tobviously belong to any class. This function also works with alot of global variables in this module.
   create_vein() - makes more sense to keep this here as it doesn'tobviously belong to any class. This function also works with alot of global variables in this module.
   create_ore() - makes more sense to keep this here as it doesn'tobviously belong to any class. This function also works with alot of global variables in this mod;ule.
   create_blacksmith() - makes more sense to keep this here as it doesn'tobviously belong to any class. This function also works with alot of global variables in this module.
   create_obstacle() - makes more sense to keep this here as it doesn'tobviously belong to any class. This function also works with alot of global variables in this module.
   schedule_entity() - This probably could have been reworked to be methods for the MinerNotFull, Vein, and Ore classes. However, it would have required a lot of reworking of our code because every other entity class would have needed a version of this function that wouldn't do anything. It makes more sense to leave this here as a function until we can use inheritance.

worldmodel.py
   nearest_entity() - left as a function because it doesn't refer to a commonly used data type and it performs logic that is used to assist other functions

worldview.py:
   viewport_to_world() - left as a function (in worldview specifically) because it deals with viewport information and specific point information. None of which would be an ideal location to hold this function as a method. Instead this method works with a combination of pygame objects and our defined function.
   world_to_viewport() - same as above. left as a function because it deals with viewport information and point information. This is a mixture of pygame objects and our objects thus it would be difficult to move to a class at this point in time.
   clamp() - this function is very ambiguous for what information it can work on, thus it is safe and smart to leave it as a function for any and all other functions/methods to use if they need it. Plus, this function is mainly used in worldview.py so it doesn't make sense to put it anywhere else.
   create_shifted_viewport() - this stays as a function because it deals with pygame objects and wouldn't really fit anywhere else.



